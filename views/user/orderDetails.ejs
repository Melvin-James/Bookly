<div class="w-full">
  <!-- Back Button and Order ID -->
  <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
    <div class="flex items-center">
      <a href="/user/profile/orders" class="mr-3 text-gray-600 hover:text-primary transition-all">
        <i class="fas fa-arrow-left"></i>
      </a>
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Order Details</h1>
        <p class="text-gray-600 text-sm">Order #<%= order.orderId %></p>
      </div>
    </div>
    
    <!-- Order Status Badge -->
    <% 
      let statusColors = { 
        'Placed': 'bg-yellow-100 text-yellow-800 border-yellow-200',
        'Shipped': 'bg-blue-100 text-blue-800 border-blue-200',
        'Out for Delivery': 'bg-indigo-100 text-indigo-800 border-indigo-200',
        'Delivered': 'bg-green-100 text-green-800 border-green-200',
        'Cancelled': 'bg-red-100 text-red-800 border-red-200',
        'Returned': 'bg-orange-100 text-orange-800 border-orange-200',
        'Failed': 'bg-gray-100 text-gray-800 border-gray-200',
        'Return Requested': 'bg-yellow-100 text-yellow-800 border-yellow-200'
      };
      let statusClass = statusColors[order.status] || 'bg-gray-100 text-gray-800 border-gray-200'; 
    %>
    <div class="mt-2 sm:mt-0 flex items-center">
      <span class="text-sm font-medium px-3 py-1.5 rounded-full border <%= statusClass %>">
        <%= order.status %>
      </span>
    </div>
  </div>

  <!-- Order Summary Card -->
  <div class="bg-white shadow-custom rounded-lg overflow-hidden mb-6">
    <div class="p-6 border-b border-gray-100">
      <div class="flex flex-col md:flex-row justify-between">
        <div class="space-y-4">
          <div>
            <h2 class="text-lg font-semibold text-gray-900 mb-1">Order Summary</h2>
            <p class="text-sm text-gray-600">
              Placed on <%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              }) %>
            </p>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
            <div>
              <span class="text-gray-600">Payment Method:</span>
              <span class="font-medium text-gray-900 ml-1"><%= order.paymentMethod %></span>
            </div>
            
          </div>
        </div>
        
        <!-- Order Timeline -->
      </div>
    </div>
    
    <!-- Payment Summary -->
    <div class="p-6 bg-gray-50">
      <h3 class="text-md font-semibold text-gray-900 mb-4">Payment Summary</h3>
      <div class="space-y-2">
        <div class="flex justify-between text-sm">
          <span class="text-gray-600">Subtotal</span>
          <% 
              let originalTotal = 0;
              let discountedTotal = 0;

              order.items.forEach(item => {
                originalTotal += item.originalPrice * item.quantity;
                discountedTotal += item.discountedPrice * item.quantity;
              });

              let offerDiscount = originalTotal - discountedTotal;
              let couponDiscount = order.discountAmount - offerDiscount;
            %>
          <span class="font-medium text-gray-900">₹<%=originalTotal.toFixed(2) %></span>
        </div>
        
        <% if (order.couponApplied) { %>
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Coupon Discount (<%= order.couponApplied %>)</span>
            <span class="font-medium text-green-600">-₹<%=couponDiscount.toFixed(2) %></span>
          </div>
        <% } %>
        
        <% if (order.productDiscount && order.productDiscount > 0) { %>
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Offer Discount</span>
            <span class="font-medium text-green-600">-₹<%= order.productDiscount.toFixed(2) %></span>
          </div>
        <% } %>
        
        <div class="border-t border-gray-200 pt-2 mt-2">
          <div class="flex justify-between">
            <span class="font-semibold text-gray-900">Total</span>
            <span class="font-bold text-primary">₹<%= order.totalAmount.toFixed(2) %></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Shipping Address -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
    <div class="bg-white shadow-custom rounded-lg overflow-hidden md:col-span-1">
      <div class="p-5 border-b border-gray-100">
        <h3 class="text-md font-semibold text-gray-900 flex items-center">
          <i class="fas fa-map-marker-alt text-primary mr-2"></i>
          Shipping Address
        </h3>
      </div>
      <div class="p-5">
        <div class="text-sm text-gray-700 space-y-2">
          <p class="font-medium text-gray-900"><%= order.address.name %></p>
          <p><%= order.address.city %>, <%= order.address.state %> - <%= order.address.pincode %></p>
          <p>Landmark: <%= order.address.landmark %></p>
          <div class="pt-2 mt-2 border-t border-gray-100">
            <p class="flex items-center">
              <i class="fas fa-phone text-gray-400 mr-2"></i>
              <%= order.address.phone %>
            </p>
            <% if (order.address.altPhone) { %>
              <p class="flex items-center">
                <i class="fas fa-phone-alt text-gray-400 mr-2"></i>
                <%= order.address.altPhone %>
              </p>
            <% } %>
          </div>
        </div>
    </div>
  </div>

    <!-- Order Items -->
    <%
      const discountTotal = order.items.reduce((sum, item) => sum + item.discountedPrice * item.quantity, 0);
      
      const couponAdjustedPrices = {};
      order.items.forEach(item => {
        const itemId = item._id;
        const itemTotal = item.discountedPrice * item.quantity;
        const couponShare = (itemTotal / discountTotal) * couponDiscount;
        const finalPrice = itemTotal - couponShare;
        couponAdjustedPrices[itemId] = finalPrice.toFixed(2);
      });
    %>

    <div class="bg-white shadow-custom rounded-lg overflow-hidden md:col-span-2">
      <div class="p-5 border-b border-gray-100">
        <h3 class="text-md font-semibold text-gray-900 flex items-center">
          <i class="fas fa-shopping-bag text-primary mr-2"></i>
          Ordered Items (<%= order.items.length %>)
        </h3>
      </div>
      <div class="divide-y divide-gray-100">
        <% order.items.forEach(item => { %>
          <div class="p-5 flex flex-col sm:flex-row">
            <div class="flex-shrink-0 mb-4 sm:mb-0 sm:mr-4">
              <img
                src="<%= item.product.productImage[0] %>"
                class="w-20 h-20 object-cover rounded-lg border border-gray-200"
                alt="<%= item.product.name %>"
              />
            </div>

            <div class="flex-grow">
              <h4 class="font-medium text-gray-900 mb-1"><%= item.product.name %></h4>

              <div class="grid grid-cols-2 gap-2 text-sm text-gray-600">
                <div>
                  Quantity: <span class="font-medium"><%= item.quantity %></span>
                </div>
                <div>
                  Price: 
                  <span class="font-medium">₹<%= couponAdjustedPrices[item._id] %></span>
                </div>
              </div>

              <% if (item.status === 'Placed') { %>
                <button
                  onclick="cancelProduct('<%= order._id %>', '<%= item._id %>')"
                  class="mt-3 text-sm text-red-600 hover:text-red-800 flex items-center"
                >
                  <i class="fas fa-times-circle mr-1"></i>
                  Cancel Book
                </button>
              <% } else if (item.status === "Delivered" && !item.isReturnRequested) { %>
                <button
                  onclick="confirmReturn('<%= order._id%>','<%= item._id %>')"
                  class="mt-3 text-sm text-yellow-600 hover:text-red-800 flex items-center"
                >
                  <i class="fas fa-undo-alt mr-2"></i>
                  Return Book
                </button>
              <% } else{ %>
                <div class="mt-3 text-sm">
                  <%
                    const itemStatusColors = {
                      'Placed': 'text-yellow-600',
                      'Shipped': 'text-blue-600',
                      'Out for Delivery': 'text-indigo-600',
                      'Delivered': 'text-green-600',
                      'Cancelled': 'text-red-600',
                      'Returned': 'text-orange-600',
                      'Return Requested' : 'text-yellow-600'
                    };
                    const itemStatusClass = itemStatusColors[item.status] || 'text-gray-600';
                  %>
                  <span class="<%= itemStatusClass %> font-medium">
                    <i class="fas fa-circle text-xs mr-1"></i>
                    <%= item.status %>
                  </span>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="flex flex-wrap gap-4 mt-8">
    <% if (order.status === "Placed") { %>
      <button
        onclick="confirmCancel('<%= order._id %>')"
        class="flex items-center px-5 py-2.5 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-all"
      >
        <i class="fas fa-ban mr-2"></i>
        Cancel Order
      </button>
    <% } %>
    
    <% if (order.status === "Failed") { %>
      <a href="/user/checkout"
        class="flex items-center px-5 py-2.5 bg-primary hover:bg-primary-dark text-white rounded-lg transition-all"
      >
        <i class="fas fa-redo mr-2"></i>
        Retry Payment
      </a>
    <% } %>
    
    <% if (canDownloadInvoice) { %>
      <a href="/user/profile/orders/<%= order._id %>/invoice"
        class="flex items-center px-5 py-2.5 bg-primary hover:bg-primary-dark text-white rounded-lg transition-all"
      >
        <i class="fas fa-file-download mr-2"></i>
        Download Invoice
      </a>
    <% } %>
  </div>
  
  <% if (order.status === 'Failed') { %>
    <div class="mt-6 p-4 rounded-lg bg-red-50 border border-red-200">
      <div class="flex items-start">
        <i class="fas fa-exclamation-triangle text-red-500 mt-1 mr-3"></i>
        <div>
          <h4 class="font-medium text-red-800">Payment Failed</h4>
          <p class="text-sm text-red-600 mt-1">This order failed due to an online payment issue. Please try again using the "Retry Payment" button above.</p>
        </div>
      </div>
    </div>
  <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  function confirmCancel(orderId) {
    Swal.fire({
      title: "Cancel this order?",
      text: "This action cannot be undone.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it"
    }).then((result) => {
      if (result.isConfirmed) {
        // Show loading state
        Swal.fire({
          title: "Processing...",
          text: "Please wait while we cancel your order.",
          allowOutsideClick: false,
          showConfirmButton: false,
          willOpen: () => {
            Swal.showLoading();
          }
        });
        
        fetch(`/user/profile/orders/${orderId}/cancel`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Order Cancelled",
                text: "Your order has been successfully cancelled.",
                confirmButtonColor: "#007D8B",
              }).then(() => {
                location.href = "/user/profile/orders";
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || "Something went wrong.",
                confirmButtonColor: '#007D8B',
              });
            }
          })
          .catch((error) => {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Something went wrong. Please try again.',
              confirmButtonColor: '#007D8B',
            });
          });
      }
    });
  }

  function confirmReturn(orderId,itemId) {
    Swal.fire({
      title: "Return Order",
      html: `
        <div class="text-left mb-4">
          <p class="text-sm text-gray-600">Please provide a reason for returning this order:</p>
        </div>
      `,
      input: "textarea",
      inputPlaceholder: "Enter your reason here...",
      inputAttributes: {
        "aria-label": "Reason for return",
        "rows": "4"
      },
      confirmButtonColor: '#007D8B',
      cancelButtonColor: '#6b7280',
      showCancelButton: true,
      confirmButtonText: "Submit Return Request",
      cancelButtonText: "Cancel",
      inputValidator: (value) => {
        if (!value || value.trim().length < 10) {
          return "Please provide a detailed reason (at least 10 characters)";
        }
      },
    }).then((result) => {
      if (result.isConfirmed) {
        // Show loading state
        Swal.fire({
          title: "Processing...",
          text: "Please wait while we process your return request.",
          allowOutsideClick: false,
          showConfirmButton: false,
          willOpen: () => {
            Swal.showLoading();
          }
        });
        
        fetch(`/user/profile/orders/return-item/${orderId}/${itemId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ reason: result.value }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Return Requested",
                text: data.message || "Your return request has been submitted successfully.",
                confirmButtonColor: "#007D8B",
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Something went wrong.",
                confirmButtonColor: "#007D8B",
              });
            }
          })
          .catch(() => {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Something went wrong. Please try again.",
              confirmButtonColor: "#007D8B",
            });
          });
      }
    });
  }
  
  function cancelProduct(orderId, itemId) {
    Swal.fire({
      title: "Cancel this item?",
      text: "Are you sure you want to cancel this item?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it"
    }).then((result) => {
      if (result.isConfirmed) {
        // Show loading state
        Swal.fire({
          title: "Processing...",
          text: "Please wait while we cancel this item.",
          allowOutsideClick: false,
          showConfirmButton: false,
          willOpen: () => {
            Swal.showLoading();
          }
        });
        
        fetch(`/user/profile/orders/cancel-item/${orderId}/${itemId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: 'success',
                title: 'Item Cancelled',
                text: data.message || "Item has been successfully cancelled.",
                confirmButtonColor: '#007D8B',
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || "Something went wrong.",
                confirmButtonColor: '#007D8B',
              });
            }
          })
          .catch(() => {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Something went wrong. Please try again.',
              confirmButtonColor: '#007D8B',
            });
          });
      }
    });
  }
</script>