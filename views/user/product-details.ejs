<%- include("../partials/userHead") %>

<section class="py-4 bg-gray-50 min-h-screen">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Breadcrumb -->
    <nav class="text-sm text-gray-500 mb-6">
      <div class="flex items-center space-x-2">
        <a href="/user/home" class="hover:text-[#007D8B] transition-colors">Home</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
        <a href="/user/shop" class="hover:text-[#007D8B] transition-colors">Books</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
        <span class="text-gray-800 font-medium truncate"><%= product.name %></span>
      </div>
    </nav>

    <!-- Main Product Section -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 lg:p-8">
        
        <!-- Image Gallery Section -->
        <div class="space-y-4">
          <!-- Main Image Container -->
          <div class="relative">
            <!-- Wishlist Button -->
            <button 
              type="button"
              id="wishlist-<%= product._id %>"
              onclick="toggleWishlist('<%= product._id %>')"
              class="absolute top-3 right-3 z-20 bg-white/90 backdrop-blur-sm p-2.5 rounded-full shadow-md hover:bg-white hover:scale-110 transition-all duration-200"
            >
              <% 
                let isInWishlist = false;
                if (userData && userData.wishlist && Array.isArray(userData.wishlist)) {
                  isInWishlist = userData.wishlist.some(item => item.toString() === product._id.toString());
                }
              %>
              <% if (isInWishlist) { %>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 6 4 4 6.5 4 8.28 4 10 5.5 12 7.09 14 5.5 15.72 4 17.5 4 20 4 22 6 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
              <% } else { %>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 hover:text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.414 4.414 0 015.364-.364L12 7.414l2.318-2.318a4.414 4.414 0 015.364.364c1.562 1.562 1.562 4.096 0 5.657L12 21 4.318 11.975a4 4 0 010-5.657z" />
                </svg>
              <% } %>
            </button>

            <!-- Main Image with Enhanced Zoom -->
            <div class="relative overflow-hidden rounded-lg bg-gray-100 border border-gray-200" id="image-container">
              <img 
                id="mainImage" 
                src="/uploads/product-images/<%= product.productImage[0] %>" 
                alt="<%= product.name %>" 
                class="w-full h-[400px] lg:h-[500px] object-cover cursor-zoom-in"
              />
              
              <!-- Zoom Lens -->
              <div id="zoom-lens" class="absolute border-2 border-[#007D8B] bg-[#007D8B]/20 pointer-events-none opacity-0 transition-opacity duration-200 rounded-full"></div>
            </div>

            <!-- Zoom Result Container -->
            <div id="zoom-result" class="hidden lg:block absolute top-0 left-full ml-4 w-[400px] h-[500px] bg-white border border-gray-200 rounded-lg shadow-xl opacity-0 pointer-events-none transition-opacity duration-200 overflow-hidden z-30">
              <div id="zoom-image" class="w-full h-full bg-no-repeat"></div>
            </div>
          </div>

          <!-- Thumbnails -->
          <div class="flex space-x-2 overflow-x-auto pb-2">
            <% product.productImage.forEach((img, idx) => { %>
              <button 
                class="thumbnail flex-shrink-0 w-16 h-16 lg:w-20 lg:h-20 rounded-md overflow-hidden border-2 transition-all duration-200 <%= idx === 0 ? 'border-[#007D8B]' : 'border-gray-200 hover:border-[#007D8B]' %>"
                data-src="/uploads/product-images/<%= img %>"
                data-index="<%= idx %>"
              >
                <img 
                  src="/uploads/product-images/<%= img %>" 
                  alt="<%= product.name %> - Image <%= idx + 1 %>"
                  class="w-full h-full object-cover"
                />
              </button>
            <% }) %>
          </div>
        </div>

        <!-- Product Information Section -->
        <div class="space-y-6">
          
          <!-- Product Title & Publisher -->
          <div>
            <h1 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-2 leading-tight"><%= product.name %></h1>
            <p class="text-lg text-gray-600">by <span class="font-semibold text-[#007D8B]"><%= product.publisher %></span></p>
          </div>

          <!-- Rating & Reviews -->
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-1">
              <% for (let i = 0; i < 5; i++) { %>
                <svg class="w-4 h-4 <%= i < 4 ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                </svg>
              <% } %>
            </div>
            <span class="text-sm text-gray-500">4.0 (124 reviews)</span>
          </div>

          <!-- Pricing Section -->
          <div class="bg-gray-50 p-4 rounded-lg">
            <div class="flex items-baseline space-x-3 mb-2">
              <span class="text-3xl lg:text-4xl font-bold text-[#007D8B]">₹<%= product.discountedPrice %></span>
              <% if (product.price !== product.discountedPrice) { %>
                <span class="text-xl text-gray-400 line-through">₹<%= product.price.toFixed(2) %></span>
              <% } %>
            </div>
            <% if (product.appliedOffer > 0) { %>
              <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  <%= product.appliedOffer %>% OFF
                </span>
                <span class="text-sm text-green-600 font-medium">You save ₹<%= (product.price - product.discountedPrice).toFixed(2) %></span>
              </div>
            <% } %>
          </div>

          <!-- Stock Status -->
          <div class="flex items-center space-x-2">
            <% if (product.status === 'Available' && product.quantity > 0) { %>
              <div class="flex items-center space-x-2">
                <div class="w-2.5 h-2.5 bg-green-500 rounded-full"></div>
                <span class="text-green-600 font-semibold">In Stock</span>
                <span class="text-gray-500 text-sm">(<%= product.quantity %> available)</span>
              </div>
            <% } else if (product.status === 'Out of Stock') { %>
              <div class="flex items-center space-x-2">
                <div class="w-2.5 h-2.5 bg-red-500 rounded-full"></div>
                <span class="text-red-500 font-semibold">Out of Stock</span>
              </div>
            <% } else { %>
              <div class="flex items-center space-x-2">
                <div class="w-2.5 h-2.5 bg-gray-500 rounded-full"></div>
                <span class="text-gray-500 font-semibold">Discontinued</span>
              </div>
            <% } %>
          </div>

          <!-- Action Buttons -->
          <div class="space-y-3">
            <% if (product.status === 'Available' && product.quantity > 0) { %>
              <button 
                class="add-to-cart-btn w-full bg-[#007D8B] hover:bg-[#006B7A] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-[1.02] shadow-md hover:shadow-lg"
                data-product-id="<%= product._id %>"
              >
                <div class="flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01" />
                  </svg>
                  <span>Add to Cart</span>
                </div>
              </button>
            <% } else { %>
              <button 
                disabled
                class="w-full bg-gray-300 text-gray-500 font-semibold py-3 px-6 rounded-lg cursor-not-allowed"
              >
                <div class="flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" />
                  </svg>
                  <span>Not Available</span>
                </div>
              </button>
            <% } %>
          </div>

          <!-- Product Details -->
          <div class="border-t pt-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Details</h3>
            <div class="grid grid-cols-1 gap-3">
              <div class="flex justify-between py-2 border-b border-gray-100">
                <span class="text-gray-600 font-medium">Category</span>
                <span class="text-gray-900"><%= product.category.name %></span>
              </div>
              <div class="flex justify-between py-2 border-b border-gray-100">
                <span class="text-gray-600 font-medium">Publisher</span>
                <span class="text-gray-900"><%= product.publisher %></span>
              </div>
              <div class="flex justify-between py-2 border-b border-gray-100">
                <span class="text-gray-600 font-medium">Color</span>
                <span class="text-gray-900"><%= product.color %></span>
              </div>
            </div>
          </div>

          <!-- Delivery Info -->
          <div class="bg-blue-50 p-4 rounded-lg">
            <h4 class="font-semibold text-gray-900 mb-2">Delivery Information</h4>
            <div class="space-y-2 text-sm">
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <span>Free delivery on orders above ₹750</span>
              </div>
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <span>7-day return policy</span>
              </div>
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <span>Cash on delivery available</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Description -->
      <div class="border-t px-6 lg:px-8 py-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">About this book</h3>
        <p class="text-gray-600 leading-relaxed"><%= product.description %></p>
      </div>
    </div>

    <!-- Related Products -->
    <div class="mt-12">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900">You might also like</h2>
        <a href="/user/shop?category=<%= product.category.name.toLowerCase() %>" class="text-[#007D8B] hover:text-[#006B7A] font-semibold transition-colors flex items-center space-x-1">
          <span>View All</span>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
      
      <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4">
        <% relatedProducts.forEach(function(book) { %>
          <div class="group bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100">
            
            <!-- Book Image -->
            <div class="relative aspect-[3/4] overflow-hidden">
              <img 
                src="/uploads/product-images/<%= book.productImage[0] %>" 
                alt="<%= book.name %>" 
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
              
              <!-- Hover Overlay -->
              <div class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                <div class="space-y-2">
                  <a href="/user/product-details/<%= book._id %>" class="block bg-white text-gray-900 px-3 py-1.5 rounded text-xs font-semibold hover:bg-gray-100 transition-colors text-center">
                    View Details
                  </a>
                  <button 
                    class="add-to-cart-btn block w-full bg-[#007D8B] text-white px-3 py-1.5 rounded text-xs font-semibold hover:bg-[#006B7A] transition-colors" 
                    data-product-id="<%= book._id %>"
                  >
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>

            <!-- Book Info -->
            <div class="p-3">
              <h3 class="font-medium text-gray-900 mb-1 text-sm line-clamp-2 group-hover:text-[#007D8B] transition-colors">
                <%= book.name %>
              </h3>
              <p class="text-xs text-gray-500 mb-2"><%= book.publisher %></p>
              
              <!-- Price -->
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-1">
                  <span class="text-sm font-bold text-[#007D8B]">₹<%= book.discountedPrice %></span>
                  <% if (book.price !== book.discountedPrice) { %>
                    <span class="text-xs text-gray-400 line-through">₹<%= book.price.toFixed(2) %></span>
                  <% } %>
                </div>
                
                <% if (book.price !== book.discountedPrice) { %>
                  <span class="bg-green-100 text-green-800 text-xs font-medium px-1.5 py-0.5 rounded">
                    <%= Math.round(((book.price - book.discountedPrice) / book.price) * 100) %>%
                  </span>
                <% } %>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  
  // Enhanced Image Gallery and Zoom Functionality
  const mainImage = document.getElementById('mainImage');
  const imageContainer = document.getElementById('image-container');
  const zoomLens = document.getElementById('zoom-lens');
  const zoomResult = document.getElementById('zoom-result');
  const zoomImage = document.getElementById('zoom-image');
  const thumbnails = document.querySelectorAll('.thumbnail');
  
  let isZooming = false;
  let zoomFactor = 2.5;
  let lensSize = 120;
  
  // Thumbnail click functionality
  thumbnails.forEach((thumbnail, index) => {
    thumbnail.addEventListener('click', function() {
      const newSrc = this.getAttribute('data-src');
      
      // Update main image
      mainImage.src = newSrc;
      
      // Update zoom image
      zoomImage.style.backgroundImage = `url('${newSrc}')`;
      
      // Update active thumbnail
      thumbnails.forEach(thumb => thumb.classList.remove('border-[#007D8B]'));
      this.classList.add('border-[#007D8B]');
    });
  });
  
  // Initialize zoom image
  zoomImage.style.backgroundImage = `url('${mainImage.src}')`;
  
  // Enhanced zoom functionality
  function initializeZoom() {
    const containerRect = imageContainer.getBoundingClientRect();
    
    // Set lens size
    zoomLens.style.width = lensSize + 'px';
    zoomLens.style.height = lensSize + 'px';
    
    // Set zoom image properties
    const imageWidth = containerRect.width * zoomFactor;
    const imageHeight = containerRect.height * zoomFactor;
    
    zoomImage.style.backgroundSize = `${imageWidth}px ${imageHeight}px`;
    zoomImage.style.backgroundRepeat = 'no-repeat';
  }
  
  // Mouse enter - show zoom (desktop only)
  imageContainer.addEventListener('mouseenter', function() {
    if (window.innerWidth >= 1024) {
      isZooming = true;
      initializeZoom();
      zoomResult.style.opacity = '1';
      zoomLens.style.opacity = '1';
      mainImage.style.cursor = 'none';
    }
  });
  
  // Mouse leave - hide zoom
  imageContainer.addEventListener('mouseleave', function() {
    isZooming = false;
    zoomResult.style.opacity = '0';
    zoomLens.style.opacity = '0';
    mainImage.style.cursor = 'zoom-in';
  });
  
  // Enhanced mouse move - update zoom position
  imageContainer.addEventListener('mousemove', function(e) {
    if (!isZooming || window.innerWidth < 1024) return;
    
    const containerRect = imageContainer.getBoundingClientRect();
    
    // Calculate mouse position relative to container
    let x = e.clientX - containerRect.left;
    let y = e.clientY - containerRect.top;
    
    // Constrain lens position within image bounds
    const halfLens = lensSize / 2;
    x = Math.max(halfLens, Math.min(x, containerRect.width - halfLens));
    y = Math.max(halfLens, Math.min(y, containerRect.height - halfLens));
    
    // Position the lens
    zoomLens.style.left = (x - halfLens) + 'px';
    zoomLens.style.top = (y - halfLens) + 'px';
    
    // Calculate background position for zoom image
    const bgPosX = ((x / containerRect.width) * 100);
    const bgPosY = ((y / containerRect.height) * 100);
    
    zoomImage.style.backgroundPosition = `${bgPosX}% ${bgPosY}%`;
  });
  
  // Mobile touch support for image switching
  let touchStartX = 0;
  let touchEndX = 0;
  
  imageContainer.addEventListener('touchstart', function(e) {
    touchStartX = e.changedTouches[0].screenX;
  });
  
  imageContainer.addEventListener('touchend', function(e) {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });
  
  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      const currentIndex = Array.from(thumbnails).findIndex(thumb => 
        thumb.classList.contains('border-[#007D8B]')
      );
      
      let newIndex;
      if (diff > 0 && currentIndex < thumbnails.length - 1) {
        // Swipe left - next image
        newIndex = currentIndex + 1;
      } else if (diff < 0 && currentIndex > 0) {
        // Swipe right - previous image
        newIndex = currentIndex - 1;
      }
      
      if (newIndex !== undefined) {
        thumbnails[newIndex].click();
      }
    }
  }
  
  // Wishlist functionality
  window.toggleWishlist = function(productId) {
    const button = document.getElementById(`wishlist-${productId}`);
    if (!button) return;
    
    // Show loading state
    const originalHTML = button.innerHTML;
    button.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
      </svg>
    `;
    button.disabled = true;
    
    fetch(`/user/wishlist/${productId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        const wasAdded = !data.message.toLowerCase().includes('removed');
        
        // Update heart icon
        button.innerHTML = wasAdded
          ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 24 24" fill="currentColor">
               <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 6 4 4 6.5 4 8.28 4 10 5.5 12 7.09 14 5.5 15.72 4 17.5 4 20 4 22 6 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
             </svg>`
          : `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 hover:text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.414 4.414 0 015.364-.364L12 7.414l2.318-2.318a4.414 4.414 0 015.364.364c1.562 1.562 1.562 4.096 0 5.657L12 21 4.318 11.975a4 4 0 010-5.657z" />
             </svg>`;
        
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: data.message,
          showConfirmButton: false,
          timer: 1500,
          timerProgressBar: true
        });
      } else {
        button.innerHTML = originalHTML;
        Swal.fire({
          icon: 'error',
          title: 'Oops',
          text: data.message,
          confirmButtonColor: '#007D8B'
        });
      }
    })
    .catch(err => {
      button.innerHTML = originalHTML;
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong',
        confirmButtonColor: '#007D8B'
      });
    })
    .finally(() => {
      button.disabled = false;
    });
  };
  
  // Enhanced add to cart functionality
  document.querySelectorAll('.add-to-cart-btn').forEach(button => {
    button.addEventListener('click', async function() {
      const productId = this.getAttribute('data-product-id');
      
      // Add loading state
      const originalHTML = this.innerHTML;
      this.innerHTML = `
        <div class="flex items-center justify-center space-x-2">
          <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <span>Adding...</span>
        </div>
      `;
      this.disabled = true;

      try {
        const response = await fetch(`/user/cart/add/${productId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();

        if (result.alreadyInCart) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'info',
            title: 'Already in cart',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
          });
        } else if (result.added) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: 'Added to cart successfully!',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
          });
          
          // Update cart count if function exists
          if (window.updateCartCount) {
            window.updateCartCount();
          }
        } else {
          throw new Error(result.message || 'Something went wrong');
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message,
          confirmButtonColor: '#007D8B'
        });
      } finally {
        // Reset button state
        this.innerHTML = originalHTML;
        this.disabled = false;
      }
    });
  });
  
  // Keyboard navigation for image gallery
  document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      const currentIndex = Array.from(thumbnails).findIndex(thumb => 
        thumb.classList.contains('border-[#007D8B]')
      );
      
      let newIndex;
      if (e.key === 'ArrowRight' && currentIndex < thumbnails.length - 1) {
        newIndex = currentIndex + 1;
      } else if (e.key === 'ArrowLeft' && currentIndex > 0) {
        newIndex = currentIndex - 1;
      }
      
      if (newIndex !== undefined) {
        thumbnails[newIndex].click();
        e.preventDefault();
      }
    }
  });
});
</script>

<style>
/* Enhanced styles for the product details page */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Zoom lens styling */
#zoom-lens {
  border-radius: 50%;
  cursor: none;
  backdrop-filter: blur(1px);
}

/* Smooth transitions */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 200ms;
}

/* Loading animation */
@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb {
  background: #007D8B;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #006B7A;
}

/* Enhanced hover effects */
.group:hover .group-hover\:scale-105 {
  transform: scale(1.05);
}

.group:hover .group-hover\:text-\[\#007D8B\] {
  color: #007D8B;
}

/* Button hover effects */
button:hover:not(:disabled) {
  transform: translateY(-1px);
}

/* Responsive adjustments */
@media (max-width: 1024px) {
  #zoom-result {
    display: none !important;
  }
  
  #zoom-lens {
    display: none !important;
  }
}

@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* Focus states for accessibility */
button:focus,
a:focus {
  outline: 2px solid #007D8B;
  outline-offset: 2px;
}

/* Image loading state */
img {
  background-color: #f3f4f6;
  background-image: linear-gradient(45deg, #e5e7eb 25%, transparent 25%), 
                    linear-gradient(-45deg, #e5e7eb 25%, transparent 25%), 
                    linear-gradient(45deg, transparent 75%, #e5e7eb 75%), 
                    linear-gradient(-45deg, transparent 75%, #e5e7eb 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
}

/* Enhanced mobile touch targets */
@media (max-width: 768px) {
  button {
    min-height: 44px;
    min-width: 44px;
  }
  
  .thumbnail {
    min-width: 60px;
    min-height: 60px;
  }
}
</style>

<%- include("../partials/userFooter") %>