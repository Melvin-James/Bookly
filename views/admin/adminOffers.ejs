<div class="min-h-screen bg-gray-50">
<!-- Page Header -->
<div class="bg-white shadow-sm border-b border-gray-200 mb-6">
  <div class="px-4 sm:px-6 lg:px-8 py-6">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
      <div>
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900 flex items-center gap-3">
          <div class="w-10 h-10 bg-gradient-to-br from-[#007D8B] to-[#006a75] rounded-xl flex items-center justify-center shadow-lg">
            <i class="ri-price-tag-3-line text-white text-xl"></i>
          </div>
          Offer Management
        </h1>
        <p class="mt-1 text-sm text-gray-500">Manage product and category offers</p>
      </div>
      
      <!-- Pagination Controls -->
      <div class="flex items-center gap-4">
        <div class="flex items-center gap-2">
          <label for="itemsPerPage" class="text-sm font-medium text-gray-700">Items per page:</label>
          <select id="itemsPerPage" class="px-3 py-1.5 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B]">
            <option value="5" <%= pagination.limit === 5 ? 'selected' : '' %>>5</option>
            <option value="10" <%= pagination.limit === 10 ? 'selected' : '' %>>10</option>
            <option value="20" <%= pagination.limit === 20 ? 'selected' : '' %>>20</option>
            <option value="50" <%= pagination.limit === 50 ? 'selected' : '' %>>50</option>
          </select>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Main Content -->
<div class="px-4 sm:px-6 lg:px-8 pb-8">
  <!-- Product Offers Section -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-6">
    <div class="px-6 py-4 border-b border-gray-200">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h3 class="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <i class="ri-book-2-line text-[#007D8B]"></i>
          Product Offers
        </h3>
        
        <!-- Search for Products -->
        <div class="flex items-center gap-2">
          <div class="relative">
            <input type="text" id="productSearch" placeholder="Search products..." 
                   value="<%= pagination.productSearch %>"
                   class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] w-64">
            <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          </div>
          <button onclick="searchProducts()" class="px-4 py-2 bg-[#007D8B] text-white rounded-lg hover:bg-[#006a75] transition-colors text-sm">
            <i class="ri-search-line"></i>
          </button>
        </div>
      </div>
    </div>
    
    <div class="p-6">
      <form id="productOfferForm" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div class="space-y-2">
          <label for="productSelect" class="block text-sm font-medium text-gray-700">Select Product</label>
          <select id="productSelect" name="productId" class="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] transition-all text-sm bg-white">
            <option value="">Choose a product...</option>
            <% allProducts.forEach(p => { %>
              <option value="<%= p._id %>"><%= p.name %></option>
            <% }) %>
          </select>
          <div id="productSelectError" class="text-sm text-[#007D8B] hidden"></div>
        </div>
        
        <div class="space-y-2">
          <label for="productOffer" class="block text-sm font-medium text-gray-700">Offer Percentage</label>
          <div class="relative">
            <input type="number" id="productOffer" name="offer" min="0" max="100" step="1" placeholder="Enter offer %" 
                   class="w-full px-3 py-2.5 pr-8 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] transition-all text-sm">
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <span class="text-gray-400 text-sm">%</span>
            </div>
          </div>
          <div id="productOfferError" class="text-sm text-[#007D8B] hidden"></div>
        </div>
        
        <div class="flex items-end">
          <button type="submit" class="w-full bg-[#007D8B] text-white px-4 py-2.5 rounded-lg hover:bg-[#006a75] transition-all duration-200 font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 flex items-center justify-center gap-2">
            <i class="ri-price-tag-3-line text-sm"></i>
            <span class="submit-text">Apply Offer</span>
            <span class="loading-text hidden">Applying...</span>
          </button>
        </div>
      </form>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Product</th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Offer</th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody id="productOffersTable" class="bg-white divide-y divide-gray-200">
            <% products.forEach(p => { if (p.productOffer > 0) { %>
              <tr class="hover:bg-gray-50 transition-colors duration-200" id="product-<%= p._id %>">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-[#007D8B] to-[#006a75] rounded-lg flex items-center justify-center shadow-sm">
                      <i class="ri-book-2-line text-white text-lg"></i>
                    </div>
                    <div class="text-sm font-medium text-gray-900"><%= p.name %></div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
                    <i class="ri-percent-line text-xs"></i>
                    <%= p.productOffer %>% OFF
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                  <button onclick="removeOffer('product', '<%= p._id %>')" 
                          class="inline-flex items-center gap-1.5 px-3 py-1.5 bg-red-500 hover:bg-red-600 text-white rounded-lg text-xs font-medium transition-all duration-200 shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-red-500/30">
                    <i class="ri-delete-bin-line text-sm"></i>
                    Remove
                  </button>
                </td>
              </tr>
            <% } }) %>
          </tbody>
        </table>
        
        <!-- No results message -->
        <% if (products.length === 0) { %>
          <div class="text-center py-8">
            <i class="ri-inbox-line text-4xl text-gray-400 mb-2"></i>
            <p class="text-gray-500">No products found</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Category Offers Section -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-6">
    <div class="px-6 py-4 border-b border-gray-200">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h3 class="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <i class="ri-folder-line text-[#007D8B]"></i>
          Category Offers
        </h3>
        
        <!-- Search for Categories -->
        <div class="flex items-center gap-2">
          <div class="relative">
            <input type="text" id="categorySearch" placeholder="Search categories..." 
                   value="<%= pagination.categorySearch %>"
                   class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] w-64">
            <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          </div>
          <button onclick="searchCategories()" class="px-4 py-2 bg-[#007D8B] text-white rounded-lg hover:bg-[#006a75] transition-colors text-sm">
            <i class="ri-search-line"></i>
          </button>
        </div>
      </div>
    </div>
    
    <div class="p-6">
      <form id="categoryOfferForm" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div class="space-y-2">
          <label for="categorySelect" class="block text-sm font-medium text-gray-700">Select Category</label>
          <select id="categorySelect" name="categoryId" class="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] transition-all text-sm bg-white">
            <option value="">Choose a category...</option>
            <% allCategories.forEach(c => { %>
              <option value="<%= c._id %>"><%= c.name %></option>
            <% }) %>
          </select>
          <div id="categorySelectError" class="text-sm text-[#007D8B] hidden"></div>
        </div>
        
        <div class="space-y-2">
          <label for="categoryOffer" class="block text-sm font-medium text-gray-700">Offer Percentage</label>
          <div class="relative">
            <input type="number" id="categoryOffer" name="offer" min="0" max="100" step="1" placeholder="Enter offer %" 
                   class="w-full px-3 py-2.5 pr-8 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 focus:border-[#007D8B] transition-all text-sm">
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <span class="text-gray-400 text-sm">%</span>
            </div>
          </div>
          <div id="categoryOfferError" class="text-sm text-[#007D8B] hidden"></div>
        </div>
        
        <div class="flex items-end">
          <button type="submit" class="w-full bg-[#007D8B] text-white px-4 py-2.5 rounded-lg hover:bg-[#006a75] transition-all duration-200 font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-[#007D8B]/30 flex items-center justify-center gap-2">
            <i class="ri-price-tag-3-line text-sm"></i>
            <span class="submit-text">Apply Offer</span>
            <span class="loading-text hidden">Applying...</span>
          </button>
        </div>
      </form>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Category</th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Offer</th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody id="categoryOffersTable" class="bg-white divide-y divide-gray-200">
            <% categories.forEach(c => { if (c.categoryOffer > 0) { %>
              <tr class="hover:bg-gray-50 transition-colors duration-200" id="category-<%= c._id %>">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-[#007D8B] to-[#006a75] rounded-lg flex items-center justify-center shadow-sm">
                      <i class="ri-folder-line text-white text-lg"></i>
                    </div>
                    <div class="text-sm font-medium text-gray-900"><%= c.name %></div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
                    <i class="ri-percent-line text-xs"></i>
                    <%= c.categoryOffer %>% OFF
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                  <button onclick="removeOffer('category', '<%= c._id %>')" 
                          class="inline-flex items-center gap-1.5 px-3 py-1.5 bg-red-500 hover:bg-red-600 text-white rounded-lg text-xs font-medium transition-all duration-200 shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-red-500/30">
                    <i class="ri-delete-bin-line text-sm"></i>
                    Remove
                  </button>
                </td>
              </tr>
            <% } }) %>
          </tbody>
        </table>
        
        <!-- No results message -->
        <% if (categories.length === 0) { %>
          <div class="text-center py-8">
            <i class="ri-inbox-line text-4xl text-gray-400 mb-2"></i>
            <p class="text-gray-500">No categories found</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Pagination Controls -->
  <% if (pagination.totalPages > 1) { %>
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 px-6 py-4">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <!-- Page Info -->
        <div class="text-sm text-gray-700">
          Showing page <span class="font-medium"><%= pagination.currentPage %></span> of 
          <span class="font-medium"><%= pagination.totalPages %></span>
          (<%= Math.max(pagination.totalProducts, pagination.totalCategories) %> total items)
        </div>
        
        <!-- Pagination Buttons -->
        <div class="flex items-center gap-2">
          <!-- First Page -->
          <% if (pagination.currentPage > 2) { %>
            <button onclick="goToPage(1)" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              <i class="ri-skip-back-line"></i>
            </button>
          <% } %>
          
          <!-- Previous Page -->
          <% if (pagination.hasPrevPage) { %>
            <button onclick="goToPage('<%= pagination.currentPage - 1 %>')" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              <i class="ri-arrow-left-s-line"></i> Previous
            </button>
          <% } %>
          
          <!-- Page Numbers -->
          <% 
            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
            for (let i = startPage; i <= endPage; i++) { 
          %>
            <button onclick="goToPage('<%= i %>')" 
                    class="px-3 py-2 text-sm rounded-lg transition-colors <%= i === pagination.currentPage ? 'bg-[#007D8B] text-white' : 'border border-gray-300 hover:bg-gray-50' %>">
              <%= i %>
            </button>
          <% } %>
          
          <!-- Next Page -->
          <% if (pagination.hasNextPage) { %>
            <button onclick="goToPage('<%= pagination.currentPage + 1 %>')" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              Next <i class="ri-arrow-right-s-line"></i>
            </button>
          <% } %>
          
          <!-- Last Page -->
          <% if (pagination.currentPage < pagination.totalPages - 1) { %>
            <button onclick="goToPage('<%= pagination.totalPages %>')" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              <i class="ri-skip-forward-line"></i>
            </button>
          <% } %>
        </div>
      </div>
    </div>
  <% } %>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// Pagination functions
function goToPage(page) {
  const url = new URL(window.location);
  url.searchParams.set('page', page);
  window.location.href = url.toString();
}

function searchProducts() {
  const searchTerm = document.getElementById('productSearch').value;
  const url = new URL(window.location);
  url.searchParams.set('productSearch', searchTerm);
  url.searchParams.set('page', 1); // Reset to first page
  window.location.href = url.toString();
}

function searchCategories() {
  const searchTerm = document.getElementById('categorySearch').value;
  const url = new URL(window.location);
  url.searchParams.set('categorySearch', searchTerm);
  url.searchParams.set('page', 1); // Reset to first page
  window.location.href = url.toString();
}

// Items per page change
document.getElementById('itemsPerPage').addEventListener('change', function() {
  const url = new URL(window.location);
  url.searchParams.set('limit', this.value);
  url.searchParams.set('page', 1); // Reset to first page
  window.location.href = url.toString();
});

// Search on Enter key
document.getElementById('productSearch').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    searchProducts();
  }
});

document.getElementById('categorySearch').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    searchCategories();
  }
});

// Existing validation and form functions remain the same...
function validateOfferInput(input) {
  let value = parseFloat(input.value);
  if (isNaN(value)) {
    input.value = '';
  } else {
    value = Math.max(0, Math.min(100, Math.round(value)));
    input.value = value === 0 ? '' : value;
  }
}

function showError(fieldId, message) {
  const errorElement = document.getElementById(fieldId + 'Error');
  const inputElement = document.getElementById(fieldId);
  
  errorElement.textContent = message;
  errorElement.classList.remove('hidden');
  inputElement.classList.add('border-[#007D8B]', 'ring-2', 'ring-[#007D8B]/30');
}

function clearError(fieldId) {
  const errorElement = document.getElementById(fieldId + 'Error');
  const inputElement = document.getElementById(fieldId);
  
  errorElement.classList.add('hidden');
  inputElement.classList.remove('border-[#007D8B]', 'ring-2', 'ring-[#007D8B]/30');
}

function validateForm(formType) {
  let isValid = true;
  const selectId = formType + 'Select';
  const offerId = formType + 'Offer';
  
  clearError(selectId);
  clearError(offerId);
  
  const selectValue = document.getElementById(selectId).value;
  if (!selectValue) {
    showError(selectId, 'Please select a ' + formType);
    isValid = false;
  }
  
  const offerValue = document.getElementById(offerId).value;
  if (!offerValue || offerValue <= 0 || offerValue > 100) {
    showError(offerId, 'Please enter a valid offer percentage (1-100)');
    isValid = false;
  }
  
  return isValid;
}

async function submitOfferForm(type, form) {
  if (!validateForm(type)) {
    return;
  }
  
  const formData = new URLSearchParams(new FormData(form));
  const submitBtn = form.querySelector('button[type="submit"]');
  
  try {
    submitBtn.disabled = true;
    submitBtn.querySelector('.submit-text').classList.add('hidden');
    submitBtn.querySelector('.loading-text').classList.remove('hidden');

    const response = await fetch(`/admin/offers/${type}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData
    });
    
    const result = await response.json();
    
    if (result.success) {
      showToast('success', result.message);
      form.reset();
      clearError(type + 'Select');
      clearError(type + 'Offer');
      // Refresh page to show updated data
      window.location.reload();
    } else {
      showToast('error', result.message);
    }
  } catch (error) {
    showToast('error', 'Network error. Please try again.');
    console.error(error);
  } finally {
    submitBtn.disabled = false;
    submitBtn.querySelector('.submit-text').classList.remove('hidden');
    submitBtn.querySelector('.loading-text').classList.add('hidden');
  }
}

async function removeOffer(type, id) {
  const result = await Swal.fire({
    title: 'Remove Offer?',
    text: `Are you sure you want to remove this ${type} offer?`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#007D8B',
    cancelButtonColor: '#6b7280',
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'Cancel'
  });

  if (!result.isConfirmed) return;

  const button = document.querySelector(`#${type}-${id} button`);
  
  try {
    button.disabled = true;
    button.innerHTML = '<i class="ri-loader-4-line text-sm animate-spin"></i> Removing...';

    const response = await fetch(`/admin/offers/${type}/delete/${id}`, {
      method: 'POST'
    });
    
    const result = await response.json();
    
    if (result.success) {
      showToast('success', result.message);
      document.getElementById(`${type}-${id}`).remove();
    } else {
      showToast('error', result.message);
    }
  } catch (error) {
    showToast('error', 'Network error. Please try again.');
    console.error(error);
  } finally {
    if (button) {
      button.disabled = false;
      button.innerHTML = '<i class="ri-delete-bin-line text-sm"></i> Remove';
    }
  }
}

function showToast(icon, message) {
  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener('mouseenter', Swal.stopTimer);
      toast.addEventListener('mouseleave', Swal.resumeTimer);
    }
  });
  
  Toast.fire({
    icon: icon,
    title: message
  });
}

// Add input validation on keyup
document.getElementById('productOffer').addEventListener('input', function() {
  validateOfferInput(this);
  clearError('productOffer');
});

document.getElementById('categoryOffer').addEventListener('input', function() {
  validateOfferInput(this);
  clearError('categoryOffer');
});

document.getElementById('productSelect').addEventListener('change', function() {
  clearError('productSelect');
});

document.getElementById('categorySelect').addEventListener('change', function() {
  clearError('categorySelect');
});

document.getElementById('productOfferForm').addEventListener('submit', (e) => {
  e.preventDefault();
  submitOfferForm('product', e.target);
});

document.getElementById('categoryOfferForm').addEventListener('submit', (e) => {
  e.preventDefault();
  submitOfferForm('category', e.target);
});
</script>