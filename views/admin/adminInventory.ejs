<div class="max-w-7xl mx-auto p-6">
    <h1 class="text-2xl font-bold text-primary mb-6">Inventory Management</h1>

    <div class="flex justify-between items-center mb-4">
      <input id="searchInput" type="text" placeholder="Search by name" class="border rounded px-3 py-1 w-64" />
      <div>
        <button onclick="performSearch()" class="bg-[#007D8B] text-white px-3 py-1 rounded hover:opacity-90">Search</button>
        <button onclick="clearSearch()" class="bg-gray-200 text-black px-3 py-1 rounded">Clear</button>
      </div>
    </div>
    
  
    <div class="overflow-x-auto bg-white shadow rounded-lg">
      <table class="min-w-full divide-y divide-gray-200 text-sm text-left">
        <thead class="bg-gray-100 text-gray-700">
          <tr>
            <th class="px-4 py-3">Image</th>
            <th class="px-4 py-3">Name</th>
            <th class="px-4 py-3">Category</th>
            <th class="px-4 py-3">Price</th>
            <th class="px-4 py-3">Stock</th>
            <th class="px-4 py-3">Status</th>
            <th class="px-4 py-3 text-center">Actions</th>
          </tr>
        </thead>
  
        <tbody id="inventoryBody" class="divide-y divide-gray-100">
          <% products.forEach(product => { %>
            <tr data-product-id="<%= product._id %>">
              <td class="px-4 py-3">
                <img src="/uploads/product-images/<%= product.productImage[0] %>" class="w-16 h-16 object-cover rounded" />
              </td>
              <td class="px-4 py-3"><%= product.name %></td>
              <td class="px-4 py-3"><%= product.category.name %></td>
              <td class="px-4 py-3">₹<%= product.price.toFixed(2) %></td>
              <td class="px-4 py-3">
                <input type="number" name="quantity" value="<%= product.quantity %>" min="0" required class="w-20 border px-2 py-1 rounded" />
              </td>
              <td class="px-4 py-3">
                <select name="status" required class="border px-2 py-1 rounded">
                  <option value="Available" <%= product.status === 'Available' ? 'selected' : '' %>>Available</option>
                  <option value="Out of Stock" <%= product.status === 'Out of Stock' ? 'selected' : '' %>>Out of Stock</option>
                  <option value="Discontinued" <%= product.status === 'Discontinued' ? 'selected' : '' %>>Discontinued</option>
                </select>
              </td>
              <td class="px-4 py-3 text-center">
                <button type="button" class="update-btn bg-[#007D8B] text-white px-4 py-1 rounded hover:bg-primary-dark transition">
                  Update
                </button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <div class="flex justify-center mt-6 space-x-2" id="paginationControls">
      <!-- Pagination buttons will be generated by JS -->
    </div>
    
  </div>
  
  <!-- SweetAlert2 CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <!-- Update Button Script -->
  <script>
    document.querySelectorAll('.update-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const row = button.closest('tr');
        const productId = row.getAttribute('data-product-id');
        const quantity = row.querySelector('input[name="quantity"]').value;
        const status = row.querySelector('select[name="status"]').value;
  
        try {
          const response = await fetch(`/admin/inventory/update-stock/${productId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ quantity, status })
          });
  
          const data = await response.json();
          if (data.success) {
            Swal.fire({
              toast: true,
              icon: 'success',
              title: 'Product stock/status updated',
              position: 'top-end',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true
            });
          } else {
            throw new Error(data.message || 'Update failed');
          }
        } catch (err) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: err.message,
            confirmButtonColor: '#007D8B',
          });
        }
      });
    });

  //pagination
  async function performPagination(page = 1) {
    const query = document.getElementById('searchInput').value;
    const response = await fetch(`/admin/stock-pagination?page=${page}&query=${encodeURIComponent(query)}`);
    const data = await response.json();

    if (data.success) {
      const tbody = document.getElementById('inventoryBody');
      tbody.innerHTML = '';

      data.products.forEach(product => {
        tbody.innerHTML += `
          <tr data-product-id="${product._id}">
            <td class="px-4 py-3">
              <img src="/uploads/product-images/${product.productImage[0]}" class="w-16 h-16 object-cover rounded" />
            </td>
            <td class="px-4 py-3">${product.name}</td>
            <td class="px-4 py-3">${product.category.name}</td>
            <td class="px-4 py-3">₹${product.price.toFixed(2)}</td>
            <td class="px-4 py-3">
              <input type="number" name="quantity" value="${product.quantity}" min="0" required class="w-20 border px-2 py-1 rounded" />
            </td>
            <td class="px-4 py-3">
              <select name="status" required class="border px-2 py-1 rounded">
                <option value="Available" ${product.status === 'Available' ? 'selected' : ''}>Available</option>
                <option value="Out of Stock" ${product.status === 'Out of Stock' ? 'selected' : ''}>Out of Stock</option>
                <option value="Discontinued" ${product.status === 'Discontinued' ? 'selected' : ''}>Discontinued</option>
              </select>
            </td>
            <td class="px-4 py-3 text-center">
              <button type="button" class="update-btn bg-[#007D8B] text-white px-4 py-1 rounded hover:bg-primary-dark transition">
                Update
              </button>
            </td>
          </tr>
        `;
      });

      document.querySelectorAll('.update-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const row = button.closest('tr');
          const productId = row.getAttribute('data-product-id');
          const quantity = row.querySelector('input[name="quantity"]').value;
          const status = row.querySelector('select[name="status"]').value;

          try {
            const response = await fetch(`/admin/inventory/update-stock/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ quantity, status })
            });

            const data = await response.json();
            if (data.success) {
              Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Product stock/status updated',
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
              });
            } else {
              throw new Error(data.message || 'Update failed');
            }
          } catch (err) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: err.message,
              confirmButtonColor: '#007D8B',
            });
          }
        });
      });

      const paginationControls = document.getElementById('paginationControls');
      paginationControls.innerHTML = '';
      for (let i = 1; i <= data.totalPages; i++) {
        paginationControls.innerHTML += `
          <button onclick="performPagination(${i})"
    class="px-3 py-1 rounded ${i === data.currentPage ? 'bg-[#007D8B] text-white' : 'bg-white border text-[#007D8B] hover:bg-[#007D8B] hover:text-white'}">
    ${i}
  </button>
        `;
      }
    }
  }

  function performSearch() {
    performPagination(1);
  }

  function clearSearch() {
    document.getElementById('searchInput').value = '';
    performPagination(1);
  }

  window.onload = () => performPagination(1);
</script>
  