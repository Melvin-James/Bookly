<div class="min-h-screen bg-gray-50">
  <!-- Page Header -->
  <div class="bg-white shadow-sm border-b border-gray-200 mb-6">
    <div class="px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 class="text-2xl lg:text-3xl font-bold text-gray-900 flex items-center gap-3">
            <div class="w-10 h-10 bg-gradient-to-br from-primary to-primary-dark rounded-xl flex items-center justify-center shadow-lg">
              <i class="ri-stack-line text-white text-xl"></i>
            </div>
            Inventory Management
          </h1>
          <p class="mt-1 text-sm text-gray-500">Manage product stock levels and availability</p>
        </div>
        
        <!-- Search Form -->
        <div class="flex-shrink-0">
          <div class="flex flex-col sm:flex-row gap-2">
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="ri-search-line text-gray-400"></i>
              </div>
              <input
                id="searchInput"
                type="text"
                placeholder="Search by product name"
                class="w-full sm:w-64 pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all text-sm bg-white"
              />
            </div>
            <div class="flex gap-2">
              <button 
                onclick="performSearch()"
                class="px-4 py-2.5 bg-primary text-white rounded-lg hover:bg-primary-hover transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-primary/30 flex items-center gap-2">
                <i class="ri-search-line text-sm"></i>
                <span class="hidden sm:inline">Search</span>
              </button>
              <button 
                onclick="clearSearch()"
                class="px-4 py-2.5 border border-gray-300 rounded-lg text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-all duration-200 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-gray-200 flex items-center gap-2">
                <i class="ri-close-line text-sm"></i>
                <span class="hidden sm:inline">Clear</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="px-4 sm:px-6 lg:px-8 pb-8">
    <!-- Stats Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
            <i class="ri-stack-line text-blue-600 text-xl"></i>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Total Products</p>
            <p class="text-2xl font-bold text-gray-900" id="totalProducts">-</p>
          </div>
        </div>
      </div>
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
            <i class="ri-check-line text-green-600 text-xl"></i>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">In Stock</p>
            <p class="text-2xl font-bold text-gray-900" id="inStock">-</p>
          </div>
        </div>
      </div>
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
            <i class="ri-close-line text-red-600 text-xl"></i>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Out of Stock</p>
            <p class="text-2xl font-bold text-gray-900" id="outOfStock">-</p>
          </div>
        </div>
      </div>
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
            <i class="ri-alert-line text-yellow-600 text-xl"></i>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Low Stock</p>
            <p class="text-2xl font-bold text-gray-900" id="lowStock">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Inventory Table -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <i class="ri-table-line text-primary"></i>
          Inventory List
        </h3>
      </div>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center gap-2">
                  <i class="ri-image-line text-sm"></i>
                  Product
                </div>
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center gap-2">
                  <i class="ri-folder-line text-sm"></i>
                  Category
                </div>
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center gap-2">
                  <i class="ri-money-dollar-circle-line text-sm"></i>
                  Price
                </div>
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center gap-2">
                  <i class="ri-stack-line text-sm"></i>
                  Stock
                </div>
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center gap-2">
                  <i class="ri-shield-check-line text-sm"></i>
                  Status
                </div>
              </th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 uppercase tracking-wider">
                <div class="flex items-center justify-center gap-2">
                  <i class="ri-settings-line text-sm"></i>
                  Actions
                </div>
              </th>
            </tr>
          </thead>
          <tbody id="inventoryBody" class="bg-white divide-y divide-gray-200">
            <% products.forEach(product => { %>
              <tr data-product-id="<%= product._id %>" class="hover:bg-gray-50 transition-colors duration-200">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center gap-3">
                    <div class="flex-shrink-0">
                      <img src="/uploads/product-images/<%= product.productImage[0] %>" 
                           class="w-12 h-12 object-cover rounded-lg shadow-sm" 
                           alt="<%= product.name %>">
                    </div>
                    <div>
                      <div class="text-sm font-medium text-gray-900"><%= product.name %></div>
                      <div class="text-xs text-gray-500">SKU: #<%= product._id.toString().slice(-6) %></div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900"><%= product.category.name %></div>
                  <div class="text-xs text-gray-500">Category</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">â‚¹<%= product.price.toFixed(2) %></div>
                  <div class="text-xs text-gray-500">Base price</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center gap-2">
                    <input type="number" 
                           name="quantity" 
                           value="<%= product.quantity %>" 
                           min="0" 
                           required 
                           class="w-20 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all text-sm" />
                    <div class="text-xs text-gray-500">units</div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <select name="status" 
                          required 
                          class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all text-sm">
                    <option value="Available" <%= product.status === 'Available' ? 'selected' : '' %>>Available</option>
                    <option value="Out of Stock" <%= product.status === 'Out of Stock' ? 'selected' : '' %>>Out of Stock</option>
                    <option value="Discontinued" <%= product.status === 'Discontinued' ? 'selected' : '' %>>Discontinued</option>
                  </select>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                  <button type="button" 
                          class="update-btn inline-flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-hover transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-primary/30">
                    <i class="ri-refresh-line text-sm"></i>
                    Update
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Pagination -->
    <div class="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-gray-500">
        Showing inventory data
      </div>
      <div id="paginationControls" class="flex items-center gap-2"></div>
    </div>
  </div>
</div>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Update Button Script -->
<script>
  document.querySelectorAll('.update-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const row = button.closest('tr');
      const productId = row.getAttribute('data-product-id');
      const quantity = row.querySelector('input[name="quantity"]').value;
      const status = row.querySelector('select[name="status"]').value;

      try {
        const response = await fetch(`/admin/inventory/update-stock/${productId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity, status })
        });

        const data = await response.json();
        if (data.success) {
          Swal.fire({
            toast: true,
            icon: 'success',
            title: 'Product stock/status updated',
            position: 'top-end',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
          });
          updateStats();
        } else {
          throw new Error(data.message || 'Update failed');
        }
      } catch (err) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: err.message,
          confirmButtonColor: '#007D8B',
        });
      }
    });
  });

  //pagination
  async function performPagination(page = 1) {
    const query = document.getElementById('searchInput').value;
    const response = await fetch(`/admin/stock-pagination?page=${page}&query=${encodeURIComponent(query)}`);
    const data = await response.json();

    if (data.success) {
      const tbody = document.getElementById('inventoryBody');
      tbody.innerHTML = '';

      data.products.forEach(product => {
        tbody.innerHTML += `
          <tr data-product-id="${product._id}" class="hover:bg-gray-50 transition-colors duration-200">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex items-center gap-3">
                <div class="flex-shrink-0">
                  <img src="/uploads/product-images/${product.productImage[0]}" 
                       class="w-12 h-12 object-cover rounded-lg shadow-sm" 
                       alt="${product.name}">
                </div>
                <div>
                  <div class="text-sm font-medium text-gray-900">${product.name}</div>
                  <div class="text-xs text-gray-500">SKU: #${product._id.toString().slice(-6)}</div>
                </div>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${product.category.name}</div>
              <div class="text-xs text-gray-500">Category</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">â‚¹${product.price.toFixed(2)}</div>
              <div class="text-xs text-gray-500">Base price</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex items-center gap-2">
                <input type="number" 
                       name="quantity" 
                       value="${product.quantity}" 
                       min="0" 
                       required 
                       class="w-20 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all text-sm" />
                <div class="text-xs text-gray-500">units</div>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <select name="status" 
                      required 
                      class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all text-sm">
                <option value="Available" ${product.status === 'Available' ? 'selected' : ''}>Available</option>
                <option value="Out of Stock" ${product.status === 'Out of Stock' ? 'selected' : ''}>Out of Stock</option>
                <option value="Discontinued" ${product.status === 'Discontinued' ? 'selected' : ''}>Discontinued</option>
              </select>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-center">
              <button type="button" 
                      class="update-btn inline-flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-hover transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-primary/30">
                <i class="ri-refresh-line text-sm"></i>
                Update
              </button>
            </td>
          </tr>
        `;
      });

      // Re-attach event listeners
      document.querySelectorAll('.update-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const row = button.closest('tr');
          const productId = row.getAttribute('data-product-id');
          const quantity = row.querySelector('input[name="quantity"]').value;
          const status = row.querySelector('select[name="status"]').value;

          try {
            const response = await fetch(`/admin/inventory/update-stock/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ quantity, status })
            });

            const data = await response.json();
            if (data.success) {
              Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Product stock/status updated',
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
              });
              updateStats();
            } else {
              throw new Error(data.message || 'Update failed');
            }
          } catch (err) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: err.message,
              confirmButtonColor: '#007D8B',
            });
          }
        });
      });

      updateStats();
    }

    const paginationControls = document.getElementById('paginationControls');
    paginationControls.innerHTML = '';
    
    if (data.totalPages > 1) {
      // Previous button
      if (data.currentPage > 1) {
        const prevBtn = document.createElement('button');
        prevBtn.innerHTML = '<i class="ri-arrow-left-s-line"></i>';
        prevBtn.className = 'px-3 py-2 rounded-lg bg-white border border-gray-300 text-gray-500 hover:bg-gray-50 hover:text-gray-700 transition-all duration-200';
        prevBtn.onclick = () => performPagination(data.currentPage - 1);
        paginationControls.appendChild(prevBtn);
      }
      
      // Page numbers
      for (let i = 1; i <= data.totalPages; i++) {
        if (i === 1 || i === data.totalPages || (i >= data.currentPage - 1 && i <= data.currentPage + 1)) {
          const btn = document.createElement('button');
          btn.innerText = i;
          btn.className = `px-4 py-2 rounded-lg transition-all duration-200 ${
            i === data.currentPage 
              ? 'bg-primary text-white shadow-sm' 
              : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
          }`;
          btn.onclick = () => performPagination(i);
          paginationControls.appendChild(btn);
        } else if (i === data.currentPage - 2 || i === data.currentPage + 2) {
          const dots = document.createElement('span');
          dots.innerText = '...';
          dots.className = 'px-2 py-2 text-gray-400';
          paginationControls.appendChild(dots);
        }
      }
      
      // Next button
      if (data.currentPage < data.totalPages) {
        const nextBtn = document.createElement('button');
        nextBtn.innerHTML = '<i class="ri-arrow-right-s-line"></i>';
        nextBtn.className = 'px-3 py-2 rounded-lg bg-white border border-gray-300 text-gray-500 hover:bg-gray-50 hover:text-gray-700 transition-all duration-200';
        nextBtn.onclick = () => performPagination(data.currentPage + 1);
        paginationControls.appendChild(nextBtn);
      }
    }
  }

  function performSearch() {
    performPagination(1);
  }

  function clearSearch() {
    document.getElementById('searchInput').value = '';
    performPagination(1);
  }

  function updateStats() {
    const rows = document.querySelectorAll('#inventoryBody tr');
    let totalProducts = rows.length;
    let inStock = 0;
    let outOfStock = 0;
    let lowStock = 0;
    
    rows.forEach(row => {
      const statusSelect = row.querySelector('select[name="status"]');
      const quantityInput = row.querySelector('input[name="quantity"]');
      
      if (statusSelect && quantityInput) {
        const status = statusSelect.value;
        const quantity = parseInt(quantityInput.value) || 0;
        
        if (status === 'Available') {
          inStock++;
          if (quantity <= 5) lowStock++;
        } else if (status === 'Out of Stock') {
          outOfStock++;
        }
      }
    });
    
    document.getElementById('totalProducts').textContent = totalProducts;
    document.getElementById('inStock').textContent = inStock;
    document.getElementById('outOfStock').textContent = outOfStock;
    document.getElementById('lowStock').textContent = lowStock;
  }

  window.onload = () => {
    performPagination(1);
    updateStats();
  };
</script>